configfile: "config/config.yaml"

rule download_swissprot:
    output:
        "data/swissprot.csv"
    script:
        "scripts/download_swissprot.py"

rule rename_fasta:
    input:
        "data/{sample}.fasta"
    output:
        "data/{sample}.faa"
    shell:
        "mv {input} {output}"

rule rename_mapped_fasta:
    input:
        "data/{sample}-uniprot_mapped.fasta"
    output:
        "data/{sample}-uniprot_mapped.faa"
    shell:
        "mv {input} {output}"

rule id_mapping:
    input:
        "data/{sample}.faa"
    output:
        "data/{sample}-uniprot_mapped.faa"
    script:
        "scripts/id_mapping.py"

rule reah_homologous_proteins:
    input:
        "data/{sample}-reahid.txt",
        "data/swissprot.csv"
    output:
        "data/{sample}-uniprot_mapped.faa"
    script:
        "scripts/reah_homologous_proteins.py"

rule ec_homologous_proteins:
    input:
        "data/{sample}-ecid.txt",
        "data/swissprot.csv"
    output:
        "data/{sample}-uniprot_mapped.faa"
    script:
        "scripts/ec_homologous_proteins.py"

rule structure_clustering:
    conda:
        "envs/tmalign.yaml"
    input:
        "data/{sample}-uniprot_mapped.faa"
    output:
        "data/{sample}-structure_clusters.tar.gz"
    script:
        "scripts/reah_homologous_proteins.py"

rule sequence_clustering:
    conda:
        "envs/mmseqs2.yaml"
    input:
        "data/{sample}-structure_clusters.tar.gz"
    output:
        "data/{sample}-sequence_clusters.tar.gz"
    script:
        "scripts/sequence_clustering.py"

rule treesapp_create:
    conda:
        "envs/treesapp.yaml"
    input:
        "data/{sample}-sequence_clusters.tar.gz",
        "data/swissprot.csv"
    output:
        "result/{sample}-hyperpackage.tar.gz"
    script:
        "scripts/treesapp_create.py"
