configfile: "config/config.yaml"

# resource downloads

rule download_foldseek_database:
    output:
        "utils/foldseek_clusters.tsv.gz"
    shell:
        """
        echo "Downloading FoldSeek clusters..."
        wget -O {output} https://afdb-cluster.steineggerlab.workers.dev/5-allmembers-repId-entryId-cluFlag-taxId.tsv.gz
        """

rule build_cluster_db:
    input:
        "utils/foldseek_clusters.tsv.gz",
        "utils/uniprot_sprot.fasta.gz"
    output:
        "utils/cluster_db.sqlite3"
    script:
        "scripts/build_cluster_db.py"

rule download_swissprot_fasta:
    output:
        "utils/uniprot_sprot.fasta.gz"
    shell:
        """
        echo "Downloading SwissProt Sequences..."
        wget -O {output} ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz
        """

rule download_swissprot_entries_by_activity:
    output:
        "data/{activity_type}_{activity_number}.fasta"
    wildcard_constraints:
        activity_type="ec|rhea"
    shell:
        """
        echo "Querying SwissProt for {wildcards.activity_type} {wildcards.activity_number}..."
        wget -O {output}.gz "https://rest.uniprot.org/uniprotkb/stream?compressed=true&format=fasta&query=%28%28{wildcards.activity_type}%3A{wildcards.activity_number}%29%29+AND+%28reviewed%3Atrue%29"
        gunzip {output}.gz
        
        seq_count=$(grep -c '^>' {output} || echo 0)
        echo "Downloaded $seq_count sequences for {wildcards.activity_type} {wildcards.activity_number}"
        """

# clustering

rule structure_clustering:
    input:
        "data/{sample}.fasta",
        "utils/cluster_db.sqlite3"
    output:
        "data/structure_clusters/{sample}.fasta.tar.gz"
    script:
        "scripts/structure_clustering.py"

rule sequence_clustering:
    conda: 
        "envs/mmseqs2.yaml"
    input:
        "data/structure_clusters/{sample}.fasta.tar.gz"
    output:
        "data/sequence_clusters/{sample}.fasta.tar.gz"
    script:
        "scripts/sequence_clustering.py"

# TreeSAPP create

rule treesapp_create:
    conda:
        "envs/treesapp.yaml"
    input:
        "data/sequence_clusters/{sample}.fasta.tar.gz"
    output:
        "data/hyperpackages/{sample}.refpkg.tar.gz"
    script:
        "scripts/treesapp_create.py"
