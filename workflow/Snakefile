configfile: "config/config.yaml"

# resource downloads

# rule download_annotated_swissprot:
#     output:
#         "utils/uniprot_sprot.dat.gz"
#     shell:
#         """
#         echo "Downloading annotated SwissProt DB..."
#         curl -O {output} ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.dat.gz
#         """

rule download_foldseek_database:
    conda:
        "envs/foldseek.yaml"
    output:
        "utils/foldseek_clusters/foldseek_clusters.tsv.gz"
    shell:
        """
        mkdir -p utils/foldseek_clusters; \
        wget -O {output} https://afdb-cluster.steineggerlab.workers.dev/5-allmembers-repId-entryId-cluFlag-taxId.tsv.gz;\
        """

rule rename_fasta:
    input:
        "{file_}.fasta"
    output:
        temp("{file_}.faa")
    shell:
        "cp {input} {output}"

rule download_ec_entries:
    output:
        "data/ec_{number}.fasta"
    shell:
        """
        wget -O {output}.gz "https://rest.uniprot.org/uniprotkb/stream?compressed=true&format=fasta&query=%28%28ec%3A{wildcards.number}%29%29+AND+%28reviewed%3Atrue%29"
        gunzip {output}.gz
        """

rule download_rhea_entries:
    output:
        "data/rhea_{number}.fasta"
    shell:
        """
        wget -O {output}.gz "https://rest.uniprot.org/uniprotkb/stream?compressed=true&format=fasta&query=%28%28rhea%3A{wildcards.number}%29%29+AND+%28reviewed%3Atrue%29"
        gunzip {output}.gz
        """

# rule activity_lookup:
#     input:
#         "utils/uniprot_sprot.dat.gz"
#     output:
#         "data/{number_type}_{number}.faa",
#         "data/{number_type}_{number}_taxonomies.tsv"
#     script:
#         "scripts/activity_lookup.py"

# clustering and treesapp prep

rule structure_clustering:
    input:
        "data/{sample}-uniprot_mapped.faa",
        "utils/foldseek_clusters/foldseek_clusters.tsv.gz",
        "utils/swissprot_sequences.fasta.gz"
    output:
        temp("data/{sample}-structure_clusters.tar.gz")
    script:
        "scripts/structure_clustering.py"

rule sequence_clustering:
    conda: 
        "envs/mmseqs2.yaml"
    input:
        "data/{sample}-structure_clusters.tar.gz"
    output:
        temp("data/{sample}-sequence_clusters.tar.gz")
    script:
        "scripts/sequence_clustering.py"

# create functional reference package

rule treesapp_create:
    conda:
        "envs/treesapp.yaml"
    input:
        "utils/uniprot_sprot.fasta.gz",
        "utils/uniprot_sprot.dat.gz",
        "data/{sample}-sequence_clusters.tar.gz"
    output:
        "result/{sample}-hyperpackage.tar.gz"
    script:
        "scripts/treesapp_create.py"
